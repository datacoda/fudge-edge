# Open Source Initiative OSI - The MIT License (MIT):Licensing
#
# The MIT License (MIT)
# Copyright (c) 2012 DotCloud Inc <opensource@dotcloud.com>, Sam Alba <sam.alba@gmail.com>
#
# Modified for Fudge Edge
# Apache 2.0 License
# Copyright (c) 2014 Nephila Graphic, Ted Chen <ted@nephilagraphic.com>

set $backend '';
set $backends_len '';
set $backend_id '';
set $frontend '';
set $vhost '';

access_by_lua '
    -- Connect to Redis
    local redis = require "resty.redis"
    local red = redis:new()
    red:set_timeout(1000)
    local ok, err = red:connect("127.0.0.1", 6379)
    if not ok then
        ngx.say("Failed to connect to Redis: ", err)
        return
    end

    -- Extract only the hostname without the port
    local frontend = ngx.re.match(ngx.var.http_host, "^([^:]*)")[1]
    -- Extract the domain name without the subdomain
    local domain_name = ngx.re.match(frontend, "(\.[^.]+\.[^.]+)$")[1]

    -- Redis lookup
    red:multi()
    red:zrevrangebyscore("backend:" .. frontend, "+inf", 0)
    red:zrevrangebyscore("backend:*" .. domain_name, "+inf", 0)
    red:smembers("dead:" .. frontend)
    local ans, err = red:exec()
    if not ans then
        ngx.say("Lookup failed: ", err)
        return
    end

    -- Parse the result of the Redis lookup
    local backends = ans[1]
    if #backends == 0 then
        backends = ans[2]
    end
    if #backends == 0 then
        ngx.say("Backend not found: " .. ngx.var.http_host)
        return
    end

    local deads = ans[3]

    -- Pickup a random backend (after removing the dead ones)
    local indexes = {}
    for i, v in ipairs(deads) do
        deads[v] = true
    end
    for i, v in ipairs(backends) do
        if deads[tostring(i)] == nil then
            table.insert(indexes, i)
        end
    end
    local index = indexes[math.random(1, #backends)]
    local backend = backends[index]

    -- Announce dead backends if there is any
    local deads = ngx.shared.deads
    for i, v in ipairs(deads:get_keys()) do
        red:publish("dead", deads:get(v))
        deads:delete(v)
    end

    -- Set the connection pool (to avoid connect/close everytime)
    red:set_keepalive(0, 100)

    -- Export variables
    ngx.var.backend = backend
    ngx.var.backends_len = #backends
    ngx.var.backend_id = index - 1
    ngx.var.frontend = frontend
    ngx.var.vhost = vhost_name
';

if ($http_x_debug) {
    add_header X-Debug-Backend-Url $backend;
    add_header X-Debug-Backend-Id $backend_id;
    add_header X-Debug-Vhost $vhost;
    add_header X-Debug-Frontend-Key $frontend;
}

proxy_pass $backend;

